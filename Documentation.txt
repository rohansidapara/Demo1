Inheritance :- is a fundamental concept in OOPs that allows us to define a new class based on an existing class. For .Net there are 4 type of
               inheritance.
		1. single 
		2. Multi-level 
		3. Hierarchical 
		4. Multiple.
--> " : " symbol use for a Inherit class.
--> " interface " keyword use for multiple inheritance. interafce classes methods body is empty. they don't contian anything
--> syantax :- child class : parent class
-------------------------------------------------------------------------------------------------------------------------------------------------
Encapsulation :- is define as the wrapping of data and information under a single unit. Technically in encapsulation, the variable or data of
		 a class are hidden from any other class and can be accessed only through any member function of its own class in which they 
		 are declared.
--> Encapsulation achived by declaring all the variables in the class as "Private".
--> It will not be visible to the user that how the class is stored values in the variables.He only knows that we are passing the values to 
    accessors and variables are getting initialized to that value.
--> we use Get - Set for intialized data and use data.
--------------------------------------------------------------------------------------------------------------------------------------------------
Abstraction :- Abstraction can be defined as the Process of identifying only the required characteristics of an object ingoing the irrelevent details 
--> Abstraction can achive by Abstract classes and Access modifiers
--> Abstraction class is declared with the help of " abstract " keyword.
--> we can not create object bt using Abstract class
--> In abstraction we create a two type of methods. one is normal and another is a abstract method.
--> Abstract method can override by subclass.
--> use a "abstract" key word befor method name and return type.
--> use a "override" keyword to overrive abstract method in sub class.
------------------------------------------------------------------------------------------------------------------------------------------------------
Polymorphism :- Ploymorphism allows us to perform a single action in different ways. there are 2 types of polymorphism.
		1. runtime polymorphism (overriding)
		2. complie time polymorphism (overloading)
--> Whenever an object is bound with the functionality at run time, this is known as runtime polymorphism. Runtime polimorphism can be achived by method 
    overriding.
--> Whenever an object is bound with the functionality at compile time, this is known as compile time polymorphism.Complie time polymorphism can be achived
 by method overloading.
 -> in overloading type of parameter or type of method must be diffirent to overload method.
---------------------------------------------------------------------------------------------------------------------------------------------------------
Virtual Class :- Vritual class defined by writing a keyword "virtual" in the derived classes, allowing only one copy of data to be copied to there child 
class.
--> Virtual base class help on preventing multiple "instances"(block multiple access point).
---------------------------------------------------------------------------------------------------------------------------------------------------------
Interface :- interface is a completely "abstract class" which can only contain abstract methods and properties( with empty bodies)
--> interface method not contain anything in body. subclass use that method as per they uses.
--> Add "I" before a class name. (compulsory)
--> keyword = "interface"
------------------------------------------------------------------------------------------------------------------------------------------------------------
Assembly :- is a basic building block of .net framework application.
--> There are 2 type of Assembly : A] process (.exe) B] Libary (.dll)
            1] Private Assembly
            2] Shared Assembly//Global Assembly Cache (GAC)
--> An assembly is a c# code libary that contains the compiled and structs that are defined by your scripts and which also define references to other assemblies.
--> Assembly are implemented as .exe or .dll files.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Recursion :- is a function that calls itself. Recursion is a process where a function calls itself repeatedly until some specified condition have been completed.
--> Two condition must be satisfied if we want to solve a problem recursivaly.
--> Frist the problem must be written in recursive from so that the function will call itself.
--> Second condition is that the problem statment must include stopping condition so we can stop the function call.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Sealed class :- Selaed classes are used to restrict the users form inheriting the class
--> Sealed class is used to stop a class to be inherited 
--> we can sealed class by use "Sealed" keyword.
--> No class can be derived from a sealed class.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Static class :- Static class contain static method and static variable
--> Static classes are sealed and therefore can't be inherited
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Singlenton :- is most popular design pattens.
--> in simple terms a class that allows only a single instance to itslef to be created and usually gives simple access to that instance.
--> if we creat multiple instance than also all instance point the same object or position.
--> check all object hashcode for better understanding
--> Hashcode is a unique code generated by JVM at time of object creation.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Extention :-  the extension method concept allows you to add new methods in the existing class or in the structure without modifying the source code of the original 
type and you do not require any kind of special permission from the original type and there is no need to re-compile the original type. It is introduced in C# 3.0
--> Extention method always defined as a Static method.
--> Use "this" keyword to bind classe.
--> syntax: static void method_name(this baseclass "E"), E important for accessing the base class 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Partial Class :- A partial class is a special feature of c#. It provides a special ability to implement the functionality of a single class into multiple files and 
                 all these files are combined into a single class file when the application is compiled
--> we create a partial class using "partial" keyword
--> Every part of the partial class definition should be in the same assembly and namespace but you can use a different source file name.
--> if any part of the parital class is decleard as an abstract, sealed or base then the whole class is declared of the same type.
